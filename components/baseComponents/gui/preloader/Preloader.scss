@import "../../../../styles/constants";
@import "../../../../styles/functions";
@import "../../../../styles/mixins";
@import "../../../../styles/adaptive";

@import "../../../../styles/animations/preloader";

/**
  https://cssloaders.github.io/
  https://loading.io/spinner/
 */

body._preloader {
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  overflow: hidden;
  display: block !important;
  #__next {
    overflow-y: auto;
    height: 100vh;
  }
}

.preloader {
  // Константы
  @mixin mod($mod) {
    @include modifier("preloader", $mod) {
      @content;
    }
  }

  position: fixed;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 10;

  display: flex;
  opacity: 1;
  overflow: hidden;
  background-color: $WHITE;

  &.exit-active {
    opacity: 0;
    transition: opacity 0.6s ease-in;
  }
  &.exit-done {
    opacity: 0;
  }

  &__progress {
    position: absolute;
    bottom: 0;
    left: 0;
    transform-origin: 0 0;
    width: 100%;
    height: 4vh;
    background-color: $RED;
    transform: scaleX(0);
  }

  &__block {
    position: relative;
    font-size: vh(90px);
    width: 1em;
    height: 1em;

    @include MOBILE {
      font-size: vwm(55px);
    }

    > * {
      will-change: transform;
      position: relative;
      width: 50%;
      height: 50%;
      margin: 0;
      float: left;
      transform: scale(1);

      $duration: 2.76s;
      $delay: $duration * 0.5 * 0.25;
      $color: #E72B2C; // #FCAF17;

      &::before {
        content: "";
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        animation: cube-loader $duration infinite linear both;
        transform-origin: 100% 100%;
      }

      $list: 0, 1, 3, 2;
      @for $i from 1 through length($list) {
        $v: nth($list, $i);
        &:nth-child(#{$i}) {
          transform: scale(1) rotateZ(#{90deg * $v});
          &::before {
            animation-delay: $delay * $v;
            @if $v < 2 {
              background-color: lighten($color, 8% * (1 - $v));
            } @else {
              background-color: darken($color, 8% * ($v - 1));
            }
          }
        }
      }
    }
  }
}
